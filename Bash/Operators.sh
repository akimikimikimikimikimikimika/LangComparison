#! /usr/bin/env bash

echo """

これから演算子を試します

算術演算子
24  + 5 = $((   24  + 5   ))
24  - 5 = $((   24  - 5   ))
24  * 5 = $((   24  * 5   ))
24  / 5 = $((   24  / 5   ))
24  % 5 = $((   24  % 5   ))
24 ** 5 = $((   24 ** 5   ))

比較演算子
24 >  5 = $((   24 >  5   ))
24 >= 5 = $((   24 >= 5   ))
24 <  5 = $((   24 <  5   ))
24 <= 5 = $((   24 <= 5   ))
24 == 5 = $((   24 == 5   ))
24 != 5 = $((   24 != 5   ))

論理演算子
1 && 0 = $((   1 && 0   ))
1 || 0 = $((   1 || 0   ))
   ! 0 = $((      ! 0   ))

ビット演算子 (2進数での各桁毎の論理演算)
2#1010 & 2#1001 = 2#`echo "obase=2;$((   2#1010 & 2#1001   ))" | bc` (AND)
2#1010 | 2#1001 = 2#`echo "obase=2;$((   2#1010 | 2#1001   ))" | bc` (OR)
2#1010 ^ 2#1001 = 2#`echo "obase=2;$((   2#1010 ^ 2#1001   ))" | bc` (XOR)
       ~ 2#1001 = 2#`echo "obase=2;$((          ~ 2#1001   +16))" | bc` (NOT)

2#00111111 << 2 = 2#`echo "obase=2;$((   2#00111111 << 2   ))" | bc` (2桁左シフト)
2#00111111 >> 2 = 2#`echo "obase=2;$((   2#00111111 >> 2   ))" | bc` (2桁右シフト)

三項演算子
1 ? 7 : 4 → $((   1?7:4   ))
0 ? 7 : 4 → $((   0?7:4   ))

文字列比較演算子
\"abc\" == \"def\" = $((   "abc" == "def"   ))
\"abc\" != \"def\" = $((   "abc" != "def"   ))
\"abc\" <  \"def\" = $((   "abc" <  "def"   ))
\"abc\" <= \"def\" = $((   "abc" <= "def"   ))
\"abc\" >  \"def\" = $((   "abc" >  "def"   ))
\"abc\" >= \"def\" = $((   "abc" >= "def"   ))

算術演算子 (bcコマンド, scale=1)
24 + 5 = `echo "scale=1;24+5" | bc`
24 - 5 = `echo "scale=1;24-5" | bc`
24 * 5 = `echo "scale=1;24*5" | bc`
24 / 5 = `echo "scale=1;24/5" | bc`
24 % 5 = `echo "scale=1;24%5" | bc`
24 ^ 5 = `echo "scale=1;24^5" | bc`

比較演算子 (bcコマンド)
24 >  5 = `echo "24> 5" | bc`
24 >= 5 = `echo "24>=5" | bc`
24 <  5 = `echo "24< 5" | bc`
24 <= 5 = `echo "24<=5" | bc`
24 == 5 = `echo "24==5" | bc`
24 != 5 = `echo "24!=5" | bc`

論理演算子 (bcコマンド)
1 && 0 = `echo "1 && 0" | bc`
1 || 0 = `echo "1 || 0" | bc`
   ! 0 = `echo "   ! 0" | bc`

"""

<<"計算式の使える場所"

Bashではbcコマンドでない限り整数しか扱えない。Zshではそうでもない。

• $(( 計算式 ))
	括弧内を実行して,結果を出力してくれる
	括弧外の変数を読み書きできる (但し,変数は $a ではなく, a と表記する)
	複数式を使う場合はコンマで区切る。最後の式が出力される
	e.g. $(( b=a+6,c=9**d ))

• let 計算式
	letの後の式を計算するコマンド
	変数の読み書きできる (但し,変数は $a ではなく, a と表記する)
	複数式を使う場合はスペースで区切る
	e.g. let b=a+6 c=9**d

計算式の使える場所

<<"その他の演算子"

その他に...
複合代入演算子 : += -= *= /= %= **= &= |= ^= <<= >>=
   a += b は a= a + b と同義。その他も同様
加算子/減算子: ++ --
   e.g.
      $a=5
      $b=$((a++))
      $a=5
      $c=$((++a))
      → aは,1増加して 6 に変化し,bには加算前の 5 が代入され,cには加算後の 6 が代入される

その他の演算子

<<"条件式で使える演算子"

if [ 条件式 ]; then などと表す際に,条件式として使える演算子には次のようなものがある

条件式の表し方
"[ 条件式 ]" 或いは "test 条件式"

数値比較演算子
24 -eq 5 : 24=5
24 -ne 5 : 24≠5
24 -lt 5 : 24<5
24 -le 5 : 24≤5
24 -gt 5 : 24>5
24 -ge 5 : 24≥5

論理演算子
1 -a 0 : 1 and 0
1 -o 0 : 1  or 0
   ! 0 :   not 0

文字列比較演算子
      -n "abc" : 文字列が空でない
      -z "abc" : 文字列が空である
"abc"  = "def" : 文字列が等しい
"abc" != "def" : 文字列が等しくない

ファイル確認演算子 (File.sh も参照)
-e "filepath" : ファイルなどが存在する
-d "filepath" : ディレクトリである (或いはリンク先がディレクトリである)
-f "filepath" : ファイルである (或いはリンク先がファイルである)
-L "filepath" : シンボリックリンクである
-s "filepath" : ファイルサイズが0でない
-r "filepath" : 読取権限がある
-w "filepath" : 書込権限がある
-x "filepath" : 実行権限がある
"file1" -nt "file2" : file1の方が新しい
"file1" -ot "file2" : file1の方が古い

条件式で使える演算子

printf "\r\n\r\n"