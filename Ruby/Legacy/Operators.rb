#! /usr/bin/env ruby

require_relative "Utility.rb"

def Operators

	println """

		これから演算子を試します

		算術演算子
		24   + 5 = #{   24   + 5   }
		24   - 5 = #{   24   - 5   }
		24   * 5 = #{   24   * 5   }
		24.0 / 5 = #{   24.0 / 5   }
		24   % 5 = #{   24   % 5   }
		24  ** 5 = #{   24  ** 5   }

		比較演算子
		24 >  5 = #{   24 >  5   }
		24 >= 5 = #{   24 >= 5   }
		24 <  5 = #{   24 <  5   }
		24 <= 5 = #{   24 <= 5   }
		24 == 5 = #{   24 == 5   }
		24 != 5 = #{   24 != 5   }
		24<=> 5 = #{   24<=> 5   }
		24<=>24 = #{   24<=>24   }
		 5<=>24 = #{    5<=>24   }

		論理演算子
		true and false = #{   true and false   }
		true  && false = #{   true  && false   }
		true  or false = #{   true  or false   }
		true  || false = #{   true  || false   }
		     not false = #{        not false   }
		       ! false = #{          ! false   }

		ビット演算子 (2進数での各桁毎の論理演算)
		0b1010 & 0b1001 = 0b#{sprintf("%04b",   "0b1010".oct & "0b1001".oct   )} (AND)
		0b1010 | 0b1001 = 0b#{sprintf("%04b",   "0b1010".oct | "0b1001".oct   )} (OR)
		0b1010 ^ 0b1001 = 0b#{sprintf("%04b",   "0b1010".oct ^ "0b1001".oct   )} (XOR)
		       ~ 0b1001 = 0b#{sprintf("%04b",(               ~ "0b1001".oct   )%16)} (NOT)

		0b1010[3]       = 0b#{sprintf("%b",     "0b1010".oct[3]         )} (3+1桁目を抽出)
		0b00111111 << 2 = 0b#{sprintf("%08b",   "0b00111111".oct << 2   )} (2桁左シフト)
		0b00111111 >> 2 = 0b#{sprintf("%08b",   "0b00111111".oct >> 2   )} (2桁右シフト)

		三項演算子
		true  ? \"yes\" : \"no\" = \"#{   true  ? "yes" : "no"   }\"
		false ? \"yes\" : \"no\" = \"#{   false ? "yes" : "no"   }\"

		文字列演算子
		\"abc\"  + \"def\" = #{   "abc"  + "def"   }\"
		\"abc\" << \"def\" = #{   "abc" << "def"   }\"
		\"abc\" * 3 = \"#{   "abc" * 3   }\"
		\"string\"[0] = \"#{   "string"[0]   }\"
		\"string\"[1,2] = \"#{   "string"[1,2]   }\" (pick 2 letters from 1)
		\"string\"[1..3] = \"#{   "string"[1..3]   }\" (pick 1≦x≦3)
		\"string\"[\"ring\"] = \"#{   "string"["ring"]   }\"
		\"string\"[\"ping\"] = #{   "string"["ping"]   }
		\"string\"[/(.)t(.)ing/,2] = \"#{   "string"[/(.)t(.)ing/,2]   }\"

		\"The word “Ruby” has %d letters\" % 4 = \"#{   'The word “Ruby” has %d letters' % 4   }\"
		(sprintfの代替)

		文字列比較演算子
		\"abc\"  == \"def\" = #{   "abc"  == "def"   } (等しい)
		\"abc\"  != \"def\" = #{   "abc"  != "def"   } (等しくない)
		\"abc\"  <  \"def\" = #{   "abc"  <  "def"   } (辞書順で \"abc\" < \"def\")
		\"abc\"  <= \"def\" = #{   "abc"  <= "def"   } (辞書順で \"abc\" ≦ \"def\")
		\"abc\"  >  \"def\" = #{   "abc"  >  "def"   } (辞書順で \"abc\" > \"def\")
		\"abc\"  >= \"def\" = #{   "abc"  >= "def"   } (辞書順で \"abc\" ≧ \"def\")
		\"abc\" <=> \"def\" = #{   "abc" <=> "def"   } (辞書順で \"abc\"<=>\"def\" を演算)

		配列演算子
		[1,2,3] + [4,5,6]    = #{   [1,2,3] + [4,5,6]    }
		[1,2,3] << 4         = #{   [1,2,3] << 4         }
		[1,2,3,2] - [2,3]    = #{   [1,2,3,2] - [2,3]    }
		[1,2,3] * 3          = #{   [1,2,3] * 3          }
		[1,2,3] * \" ÷ \"      = #{   [1,2,3] * " ÷ "    }
		[1,2,3] & [2,3,4]    = #{   [1,2,3] & [2,3,4]    }
		[1,2,3] | [2,3,4]    = #{   [1,2,3] | [2,3,4]    }
		[1,2,3] == [1,2,3]   = #{   [1,2,3] == [1,2,3]   }
		[1,2] <=> [1,2,3]    = #{   [1,2] <=> [1,2,3]    }

		正規表現演算子
		/[A-F]/ =~ \"F\" = #{   /[A-F]/ =~ "F"   }
		/[A-F]/ !~ \"B\" = #{   /[A-F]/ !~ "B"   }
		\"F\" =~ /[A-F]/ = #{   "F" =~ /[A-F]/   }
		\"B\" !~ /[A-F]/ = #{   "B" !~ /[A-F]/   }

	"""

	# XOR = eXclusive OR (排他的論理和)
	# AND : 両方が 1(true) であれば, 1(true) になる
	# XOR : 一方が 1(true) であれば, 1(true) になる
	#  OR : 一方/両方が 1(true) であれば, 1(true) になる
	# NOT : 1(true) と 0(false) を逆転させる

	# ビット演算において,演算の内容を分かりやすくするため,意図的に本来の値から改変させたところがある
	# • AND,OR,XOR,NOT においては,0埋めにより演算後も4桁が維持されるようにした (本来はない桁があったりする)
	# • ビットシフトにおいては,0埋めにより演算後も8桁が維持されるようにした
	# • NOT を通常通りに計算すると,これまでなかった桁も0と見做してビット反転するため,膨大な数になる。それを防止するため,5桁目以降を切り捨てる処理をした (右端の%16)

	# "abc"  + "def" は非破壊的な文字列結合,つまり,結合した新たな文字列を返す
	# "abc" << "def" は破壊的な文字列結合,つまり,末尾に def を追加して文字列オブジェクト "abc" 自体を書き換える ( "abc".concat("def") と等価)

	# % 演算子による文字列フォーマットで複数の値を代入する例
	# "Sometimes Japanese people avoid using the number %d and %d" % [4,9]

	# その他に...
	# 複合代入演算子 : += -= *= /= %= **= &= |= ^= <<= >>= &&= ||=
	#    a += b は a= a + b と同義。その他も同様

	pnl 2

end

Operators() if runningDirectly(__FILE__)